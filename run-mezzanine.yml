#!/usr/bin/env ansible-playbook
---
- name: run mezzanine from containers
  hosts: localhost
  vars_files:
    - secrets.yml
  vars:
    # The postgres container uses the same name for the database
    # and the user
    database_name: mezzanine
    database_user: mezzanine
    database_port: "5432"
    gunicorn_port: "8000"
    docker_host: "{{ lookup('env', 'DOCKER_HOST') | regex_replace('^tcp://(.*):\\d+$', '\\\\1') | default('localhost', true) }}"
    project_dir: /srv/project
    website_domain: "{{ docker_host }}.xip.io"
    mezzanine_env:
      SECRET_KEY: "{{ secret_key }}"
      NEVERCACHE_KEY: "{{ nevercache_key }}"
      ALLOWED_HOSTS: "*"
      DATABASE_NAME: "{{ database_name }}"
      DATABASE_USER: "{{ database_user }}"
      DATABASE_PASSWORD: "{{ database_password }}"
      DATABASE_HOST: "{{ database_host }}"
      DATABASE_PORT: "{{ database_port }}"
      GUNICORN_PORT: "{{ gunicorn_port }}"
    setadmin_env:
      PROJECT_DIR: "{{ project_dir }}"
      ADMIN_PASSWORD: "{{ admin_password }}"
    setsite_env:
      PROJECT_DIR: "{{ project_dir }}"
      WEBSITE_DOMAIN: "{{ website_domain }}"

  tasks:
    - name: start the postgres container
      docker_container:
        image: postgres:9.4
        name: postgres
        published_ports: all
        env:
          POSTGRES_USER: "{{ database_user }}"
          POSTGRES_PASSWORD: "{{ database_password }}"
    - name: capture database ip address and mapped port
      set_fact:
        database_host: "{{ docker_container.NetworkSettings.IPAddress }}"
        mapped_database_port: "{{ docker_container.NetworkSettings.Ports['5432/tcp'][0].HostPort}}"
    - name: wait for database to come up
      wait_for: host={{ docker_host }} port={{ mapped_database_port }}
    - name: initialize database
      docker_container:
        image: anesh/mezzanine
        name: mezzanine
        command: python manage.py {{ item }} --noinput
        detach: no
        env: "{{ mezzanine_env }}"
      with_items:
        - syncdb
        - migrate
      register: django
    - name: set the site id
      docker_container:
        name: mezzanine
        image: anesh/mezzanine
        command: /srv/scripts/setsite.py
        env: "{{ setsite_env.update(mezzanine_env) }}{{ setsite_env }}"
        detach: no
    - name: set the admin password
      docker_container:
        name: mezzanine
        image: anesh/mezzanine
        command: /srv/scripts/setadmin.py
        env: "{{ setadmin_env.update(mezzanine_env) }}{{ setadmin_env }}"
        detach: no
    - name: start the memcached container
      docker_container:
        image: anesh/memcached
        name: memcached
    - name: start the mezzanine container
      docker_container:
        image: anesh/mezzanine
        name: mezzanine
        env: "{{ mezzanine_env }}"
        links: memcached
    - name: start the cert container
      docker_container:
        image: anesh/cert
        name: cert
    - name: run nginx
      docker_container:
        image: anesh/nginx
        ports:
          - 80:80
          - 443:443
        name: nginx
        volumes_from:
          - mezzanine
          - cert
        links: mezzanine
